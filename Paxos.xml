<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

// Total number of nodes in the network
const int N = 8;



// Number of proposers
const int Proposers = 2;

// Number of acceptors
const int Acceptors = 3;

// Number of learners
const int Learners = 8;

typedef int[0,N-1] id_t;

// Keeps track of the attainment of a majority for the first time
// Used solely for the purpose of verification
int firstMaj = 0;

// Keeps track of the IDs proposed by each of the proposers
int currentProposedID[Proposers] = {-1, -1};

// Channels to send and receive messages on the network
broadcast chan send[N][N][N];
broadcast chan receive[N][N];

// Struct which holds the ID and the value currently known to each of the nodes.
struct{
    int paxosID;
    int[0, 9] value;
} Nodes[N] = {{-1, 9}, {-1, 9}, {-1, 9}, {-1, 9}, {-1, 9}, {-1, 9}, {-1, 9}, {-1, 9}};

// Provides information about consensus. 
// When set to 1, it indicates that a consensus has been reached and that the value proposed by the proposers can no longer be changed.
int ValueAgreed[Acceptors] = {0, 0, 0};

// Used by proposers to know if a majority on an ID is achieved.
int AccRejAcceptor[Acceptors] = {0, 0, 0};

// Data structure to maintaing an accept request. 
// The majID changes and is set to the ID on which majority is reached.
// The value is set to 4 which is the value proposed by the proposers.
struct{
    int majID;
    int value;
} AcceptRequest[1] = {{-1, 4}};

// Updates the acceptors upon the receipt of a Prepare request or an Accept request from the proposers.
void UpdateAcceptor(int id, int acceptor, int flag){
    // Flag of 0 indicates a prepare request.
    if(flag == 0){
        if(currentProposedID[id] &gt; Nodes[acceptor + 2].paxosID){
            AccRejAcceptor[acceptor] = currentProposedID[id];
            if(Nodes[acceptor + 2].value == 4){
                ValueAgreed[acceptor] = 1;
            }
        }
        else{
            // ignore          
        }
    }

    // Flag of 1 indicates an accept request.
    if(flag == 1){
        if(AccRejAcceptor[acceptor] &lt;= AcceptRequest[0].majID){
            Nodes[acceptor + 2].paxosID = AcceptRequest[0].majID;
            Nodes[acceptor + 2].value = AcceptRequest[0].value;
        }

    }

}

// Updates the learners anytime a consensus is reached.
void UpdateLearners(int id, int acceptor, int flag){
    int i;
    if(flag == 1  ){
        for(i = 0; i &lt; N; i++){
            if(Nodes[i].value != Nodes[acceptor + 2].value ||
                        Nodes[i].paxosID != currentProposedID[id]){
                    Nodes[i].value = Nodes[acceptor + 2].value;
                    Nodes[i].paxosID = Nodes[acceptor + 2].paxosID;
            }
        }
    }
}

// Creates the accept request to be sent out by the proposers.
void CreateAcceptRequest(int id){
    int i;
    int count = 0;
    for(i = 0; i &lt; Acceptors; i++){
        if(ValueAgreed[i] == 1){
            AcceptRequest[0].majID = currentProposedID[id];
            AcceptRequest[0].value = Nodes[i].value;
        }else{
            count = count + 1;
        }
    }
    if(count == 3){
        AcceptRequest[0].majID = currentProposedID[id];
    }
}

// Checks to see if a majority on an ID proposed by a proposer is reached.
bool HasReachedMajority(int id){
    int i;
    int count = 0;
    for(i = 0; i &lt; 2; i++){
        if(AccRejAcceptor[i] == currentProposedID[id]){
           count = count + 1; 
        }
    }
    if(count &gt;= 2){
        return true;
    }
    return false;
}


</declaration>
	<template>
		<name>Acceptor</name>
		<parameter>const id_t id</parameter>
		<declaration>int initiator = 0;

int flag = 0;</declaration>
		<location id="id0" x="-22" y="111">
			<name x="-32" y="77">Start</name>
		</location>
		<location id="id1" x="233" y="111">
			<name x="223" y="77">WorkingNode</name>
			<committed/>
		</location>
		<location id="id2" x="-260" y="111">
			<name x="-270" y="77">NodeFailure</name>
			<committed/>
		</location>
		<location id="id3" x="-22" y="-135">
			<committed/>
		</location>
		<branchpoint id="id4" x="-22" y="-211">
		</branchpoint>
		<init ref="id0"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-4" y="94">receive[id][initiator]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-242" y="94">receive[id][initiator]!</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="assignment" x="157" y="-109">UpdateAcceptor(initiator, id, flag),
UpdateLearners(initiator, id, flag)</label>
			<label kind="probability" x="-4" y="-194">8</label>
			<nail x="233" y="-211"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="probability" x="-242" y="-194">2</label>
			<nail x="-260" y="-211"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="select" x="-22" y="-63">flg: int[0,1],
sender: int[0,3]</label>
			<label kind="synchronisation" x="-22" y="-29">send[sender][id][flg]?</label>
			<label kind="assignment" x="-22" y="-12">flag = flg,
initiator = sender</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Proposer</name>
		<parameter>const id_t id</parameter>
		<declaration>// Place local declarations here.
int messageCounter = 0;
int proposedID1 = 0;
int proposedID2 = 0;


// Generates a new ID each time during the execution of the algorithm.
// Proposer 0 generates only even IDs when proposer 1 generates only odd IDs.
void PrepareProposedID(int id){
    if(id == 0){
        if(Nodes[0].paxosID != -1 &amp;&amp; proposedID1 &lt; Nodes[0].paxosID){
            proposedID1 = Nodes[0].paxosID;
        }
        proposedID1 = proposedID1 + 1;
        if(proposedID1 % 2 != 0){
            proposedID1 = proposedID1 + 1;
            currentProposedID[id] = proposedID1;
        }else{
            currentProposedID[id] = proposedID1;
        }
    }

    if(id == 1){
        if(Nodes[1].paxosID != -1 &amp;&amp; proposedID2 &lt; Nodes[1].paxosID){
            proposedID2 = Nodes[1].paxosID;
        }
        proposedID2 = proposedID2 + 1;
        if(proposedID2 % 2 == 0){
            proposedID2 = proposedID2 + 1;
            currentProposedID[id] = proposedID2;
        }else{
            currentProposedID[id] = proposedID2;
        }

    }

}

</declaration>
		<location id="id5" x="-136" y="-76">
			<name x="-146" y="-110">Start</name>
			<label kind="exponentialrate" x="-146" y="-42">0.5</label>
		</location>
		<location id="id6" x="59" y="-76">
			<name x="49" y="-110">Acceptor0</name>
			<label kind="exponentialrate" x="49" y="-42">1.5</label>
		</location>
		<location id="id7" x="263" y="-76">
			<name x="253" y="-110">Acceptor1</name>
			<label kind="exponentialrate" x="253" y="-42">1.5</label>
		</location>
		<location id="id8" x="510" y="-76">
			<name x="500" y="-110">Acceptor2</name>
			<label kind="exponentialrate" x="500" y="-42">1.5</label>
		</location>
		<location id="id9" x="-365" y="-76">
		</location>
		<location id="id10" x="739" y="-76">
			<name x="729" y="-110">Pivot</name>
			<label kind="exponentialrate" x="729" y="-42">0.4</label>
		</location>
		<location id="id11" x="739" y="-255">
			<name x="729" y="-289">Acceptor_0</name>
			<label kind="exponentialrate" x="729" y="-221">0.4</label>
		</location>
		<location id="id12" x="510" y="-255">
			<name x="500" y="-289">Acceptor_1</name>
			<label kind="exponentialrate" x="500" y="-221">0.5</label>
		</location>
		<location id="id13" x="263" y="-255">
			<name x="253" y="-289">Acceptor_2</name>
			<label kind="exponentialrate" x="253" y="-221">0.9</label>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id10"/>
			<target ref="id5"/>
			<label kind="guard" x="212" y="51">!HasReachedMajority(id)</label>
			<nail x="739" y="51"/>
			<nail x="-136" y="51"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id5"/>
			<nail x="-136" y="-255"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="281" y="-272">send[id][2][1]!</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="528" y="-272">send[id][1][1]!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="739" y="-199">HasReachedMajority(id)</label>
			<label kind="synchronisation" x="739" y="-182">send[id][0][1]!</label>
			<label kind="assignment" x="739" y="-165">CreateAcceptRequest(id),
firstMaj = 1</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="select" x="569" y="-102">from: int[0,3]</label>
			<label kind="synchronisation" x="552" y="-68">receive[from][id]?</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="281" y="-93">send[id][2][0]!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="77" y="-93">send[id][1][0]!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-118" y="-93">send[id][0][0]!</label>
			<label kind="assignment" x="-118" y="-76">PrepareProposedID(id)</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id9"/>
			<label kind="guard" x="-347" y="-110">proposedID1 &gt; 40 || proposedID2 &gt; 40</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
// Proposers in the network.
Proposer0 = Proposer(0);
Proposer1 = Proposer(1);

// Acceptors in the network.
Acceptor0 = Acceptor(0);
Acceptor1 = Acceptor(1);
Acceptor2 = Acceptor(2);
// List one or more processes to be composed into a system.
system Proposer0, Proposer1, Acceptor0, Acceptor1, Acceptor2;
    </system>
	<queries>
		<query>
			<formula>E&lt;&gt;(Nodes[2].value == 4 &amp;&amp; Nodes[3].value == 4 &amp;&amp; Nodes[4].value == 4)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt;((Nodes[2].value == 9 &amp;&amp; Nodes[3].value == 9 &amp;&amp; Nodes[4].value == 9) &amp;&amp; (Nodes[5].value == 4 || Nodes[6].value == 4 || Nodes[7].value == 4))
</formula>
			<comment>eventually on some path, it is the case that one of the learners is aware of a consensus even before any of the acceptors are aware of a consensus themselves</comment>
		</query>
		<query>
			<formula>E&lt;&gt;((HasReachedMajority(1) || HasReachedMajority(0)) &amp;&amp; (Nodes[2].value == 4) &amp;&amp; (Nodes[3].paxosID == 4) &amp;&amp; (Nodes[4].paxosID == 4))
</formula>
			<comment>eventually on some path, upon reaching a consensus on at least one of the proposers, a consensus is attained on the proposed value of 4.
</comment>
		</query>
		<query>
			<formula>E&lt;&gt;((ValueAgreed[0] == 1 &amp;&amp; Nodes[2].value == 4) &amp;&amp; (ValueAgreed[1] == 1 &amp;&amp; Nodes[3].value != 4) &amp;&amp; (ValueAgreed[2] == 1 &amp;&amp; Nodes[4].value != 4))
</formula>
			<comment>eventually on some path, it is the case that consensus among nodes is attained and one of the nodes agree on a value of 4 whereas the other acceptors in the network agree on a value which is not 4.
</comment>
		</query>
		<query>
			<formula>Pr[&lt;=6; 85000](&lt;&gt; (Nodes[2].value == 4 &amp;&amp; Nodes[3].value == 4 &amp;&amp; Nodes[4].value == 4))</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[](Nodes[2].value == 4 || Nodes[2].value  == 9)
</formula>
			<comment>Only a value that has been proposed may be chosen.
</comment>
		</query>
	</queries>
</nta>
